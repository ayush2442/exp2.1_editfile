/*Merge Sort*/
//This is the edit to represent change in local repo done on remote...
//This is the edit made on local mach in branch1...


#include <bits/stdc++.h> 

int partition(vector<int> &arr, int low, int high) {
    int pivot = arr[low]; // Issue 1: The pivot should be arr[high].
    int i = low;
    int j = high;
    while (i < j) {
        while (arr[i] <= arr[pivot] && i <= high - 1) {
            i++;
        }
        while (arr[j] > arr[pivot] && j >= low + 1) {
            j--;
        }
        if (i < j) swap(arr[i], arr[j]);
    }
    swap(arr[low], arr[j]);
    return j;
}

void qS(vector<int> &arr, int low, int high) {
    if (low < high) {
        int pIndex = partition(arr, low, high);
        qS(arr, low, pIndex - 1);
        qS(arr, pIndex + 1, high);
    }
}

vector<int> quickSort(vector<int> arr) {
    qS(arr, 0, arr.size() - 1);
    return arr;
}

int main() {
    vector<int> arr = {9, 3, 4, 2, 1, 8};
    int n = arr.size(); // Issue 2: Use arr.size() instead of hardcoding the size.
    arr = quickSort(arr);

    // Print the sorted array
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}

